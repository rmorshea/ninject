[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ninject"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10,<4"
license = "MIT"
keywords = []
authors = [{ name = "Ryan Morshead", email = "ryan.morshead@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["typing_extensions", "paramorator>=1.0.2,<2"]

[project.urls]
Documentation = "https://github.com/rmorshea/ninject#readme"
Issues = "https://github.com/rmorshea/ninject/issues"
Source = "https://github.com/rmorshea/ninject"

[tool.hatch.version]
path = "src/ninject/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest>=8.2.2,<9",
  "pytest-asyncio>=0.23.7,<1",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[tool.hatch.envs.lint]
extra-dependencies = ["black==24.8.0", "pyright==1.1.377", "ruff==0.5.7"]
[tool.hatch.envs.lint.scripts]
typing = "pyright {args:src/ninject tests}"
style = ["ruff check {args:.}", "black --check --diff {args:.}"]
fix = ["black {args:.}", "ruff check --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.hatch.envs.docs]
extra-dependencies = [
  "mkdocs==1.6.1",
  "mkdocs-material==9.5.39",
  "mkdocs-open-in-new-tab==1.0.5",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve -f docs/mkdocs.yml"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
preview = true
target-version = ["py39"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
  "A005",   # Module shadowing built-in
  "ANN",    # Let pyright handle annotations
  "ANN401", # Allow Any type hints
  "B027",   # Allow non-abstract empty methods in abstract base classes
  "B039",   # Mutable default for contextvars
  "C901",   # Ignore complexity
  "COM812", # Trailing comma
  "CPY001", # Copyright at top of file
  "D100",   # Docstring for module
  "D104",   # Ignore missing docstring for __init__.py
  "D105",   # Docstring for magic method
  "D107",   # Docstring for __init__ method
  "D407",   # Docstring dashes under section names
  "D413",   # Docstring blank line after last section
  "DOC201", # Return type documentation
  "DOC402", # Yield type documentation
  "FBT003", # Allow boolean positional values in function calls, like `dict.get(... True)`
  "PL",     # PyLint
  "PYI",    # Stub files
  "RET505", # Unnecessary return statement after return
  "S105",   # Ignore checks for possible passwords
]
unfixable = [
  "COM819", # Trailing comma
]
extend-safe-fixes = ["TCH"]

[tool.ruff.lint.isort]
known-first-party = ["ninject"]
force-single-line = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
  "PLC2701", # Allow private imports
  "RUF029",  # Allow async functions without await
  "S101",    # Allow asserts in tests
  "D",
  "ANN",
]
"**.ipynb" = [
  "T201", # Allow print statements
]

[tool.coverage.run]
source_pkgs = ["ninject", "tests"]
branch = true
parallel = true
omit = []

[tool.coverage.paths]
ninject = ["src/ninject"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no ?cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  '\.\.\.',
]
fail_under = 100
show_missing = true
skip_covered = true
sort = "Name"
